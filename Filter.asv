classdef Filter
    properties
        Fs           % Sampling frequency
        F0           % Cutoff frequency
        Q            % Q factor
        gain         % Gain in dB
        filterType   % 'lowpass' or 'highpass'
        bufferX1     % Input buffer (x[n-1])
        bufferX2     % Input buffer (x[n-2])
        bufferY1     % Output buffer (y[n-1])
        bufferY2     % Output buffer (y[n-2])
    end
    
    methods
        function obj = Filter(Fs, F0, Q, gain, filterType)
            obj.Fs = Fs;
            obj.F0 = F0;
            obj.Q = Q;
            obj.gain = gain;
            obj.filterType = filterType;
            obj.bufferX1 = 0;
            obj.bufferX2 = 0;
            obj.bufferY1 = 0;
            obj.bufferY2 = 0;
        end
        
        function filteredSignal = applyFilter(obj, inputSignal)
            % Apply low-pass or high-pass filter to the input signal
            
            % Filter coefficients
            w0 = 2 * pi * obj.F0 / obj.Fs;
            alpha = sin(w0) / (2 * obj.Q);
            c = cos(w0);
            
            switch obj.filterType
                case 'Lowpass'
                    b0 = (1 - c) / 2;
                    b1 = 1 - c;
                    b2 = (1 - c) / 2;
                    a0 = 1 + alpha;
                    a1 = -2 * c;
                    a2 = 1 - alpha;
                case 'Highpass'
                    b0 = (1 + c) / 2;
                    b1 = -(1 + c);
                    b2 = (1 + c) / 2;
                    a0 = 1 + alpha;
                    a1 = -2 * c;
                    a2 = 1 - alpha;
            end
            % Normalize coefficients
            if strcmp(obj.filterType, 'Lowpass')

            elseif strcmp(obj.filterType, 'Highpass')

            else
                error('Invalid filter type. Choose ''lowpass'' or ''highpass''.');
            end
            
            % Normalize by a0
            b0 = b0 / a0;
            b1 = b1 / a0;
            b2 = b2 / a0;
            a1 = a1 / a0;
            a2 = a2 / a0;
            
            % Initialize filtered signal
            filteredSignal = zeros(size(inputSignal));
            
            % Process each sample
            for n = 1:length(inputSignal)
                x0 = inputSignal(n);
                
                % Compute filter output
                y0 = b0 * x0 + b1 * obj.bufferX1 + b2 * obj.bufferX2 - a1 * obj.bufferY1 - a2 * obj.bufferY2;
                
                % Update buffers
                obj.bufferX2 = obj.bufferX1;
                obj.bufferX1 = x0;
                obj.bufferY2 = obj.bufferY1;
                obj.bufferY1 = y0;
                
                % Apply gain
                y0 = 10^(obj.gain / 20) * y0;
                
                % Store filtered sample
                filteredSignal(n) = y0;
            end
        end
    end
end
